{"file":"suppliers-CqKtBit9.js","mappings":"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","names":[],"sources":["../../../../stores/suppliers.ts"],"sourcesContent":["// stores/suppliers.ts - Updated version\nimport { defineStore } from 'pinia';\nimport { useApiService } from '~/composables/useApiService';\nimport { useAuthStore } from './auth';\nimport type { Supplier, CreateSupplierData, UpdateSupplierData } from '~/services/api';\n\ninterface SuppliersState {\n  suppliers: Supplier[];\n  loading: boolean;\n  error: string | null;\n  selectedSupplier: Supplier | null;\n}\n\nexport const useSuppliersStore = defineStore('suppliers', {\n  state: (): SuppliersState => ({\n    suppliers: [],\n    loading: false,\n    error: null,\n    selectedSupplier: null,\n  }),\n\n  getters: {\n    activeSuppliers: (state) => state.suppliers.filter(s => s.isActive),\n    supplierOptions: (state) => state.suppliers\n      .filter(s => s.isActive)\n      .map(s => ({ value: s.id, text: s.name })),\n  },\n\n  actions: {\n    async fetchSuppliers() {\n      this.loading = true;\n      this.error = null;\n      const apiService = useApiService();\n      const authStore = useAuthStore();\n\n      try {\n        const suppliers = await apiService.getAllSuppliers(authStore.token || undefined);\n        this.suppliers = suppliers;\n      } catch (error: any) {\n        this.error = error.message || 'Failed to fetch suppliers';\n        this.suppliers = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async fetchSupplierById(id: string) {\n      this.loading = true;\n      this.error = null;\n      const apiService = useApiService();\n      const authStore = useAuthStore();\n\n      try {\n        const supplier = await apiService.getSupplierById(id, authStore.token || undefined);\n        this.selectedSupplier = supplier;\n        return supplier;\n      } catch (error: any) {\n        this.error = error.message || 'Failed to fetch supplier';\n        this.selectedSupplier = null;\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async createSupplier(supplierData: CreateSupplierData) {\n      this.loading = true;\n      this.error = null;\n      const apiService = useApiService();\n      const authStore = useAuthStore();\n\n      if (!authStore.token) {\n        this.error = 'Authentication token not found. Please login.';\n        this.loading = false;\n        throw new Error(this.error);\n      }\n\n      try {\n        const newSupplier = await apiService.createSupplier(supplierData, authStore.token);\n        this.suppliers.push(newSupplier);\n        return newSupplier;\n      } catch (error: any) {\n        this.error = error.message || 'Failed to create supplier';\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async updateSupplier(id: string, supplierData: UpdateSupplierData) {\n      this.loading = true;\n      this.error = null;\n      const apiService = useApiService();\n      const authStore = useAuthStore();\n\n      if (!authStore.token) {\n        this.error = 'Authentication token not found. Please login.';\n        this.loading = false;\n        throw new Error(this.error);\n      }\n\n      try {\n        const updatedSupplier = await apiService.updateSupplier(id, supplierData, authStore.token);\n        \n        // Update in the suppliers array\n        const index = this.suppliers.findIndex(s => s.id === id);\n        if (index !== -1) {\n          this.suppliers[index] = updatedSupplier;\n        }\n        \n        // Update selected supplier if it's the one being updated\n        if (this.selectedSupplier?.id === id) {\n          this.selectedSupplier = updatedSupplier;\n        }\n        \n        return updatedSupplier;\n      } catch (error: any) {\n        this.error = error.message || 'Failed to update supplier';\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async deleteSupplier(id: string) {\n      this.loading = true;\n      this.error = null;\n      const apiService = useApiService();\n      const authStore = useAuthStore();\n\n      if (!authStore.token) {\n        this.error = 'Authentication token not found. Please login.';\n        this.loading = false;\n        throw new Error(this.error);\n      }\n\n      try {\n        await apiService.deleteSupplier(id, authStore.token);\n        \n        // Remove from suppliers array or mark as inactive\n        const index = this.suppliers.findIndex(s => s.id === id);\n        if (index !== -1) {\n          this.suppliers[index].isActive = false;\n        }\n        \n        // Clear selected supplier if it was the deleted one\n        if (this.selectedSupplier?.id === id) {\n          this.selectedSupplier = null;\n        }\n        \n        return true;\n      } catch (error: any) {\n        this.error = error.message || 'Failed to delete supplier';\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    clearError() {\n      this.error = null;\n    },\n\n    clearSelectedSupplier() {\n      this.selectedSupplier = null;\n    },\n  },\n});\n\n// Re-export types for convenience\nexport type { Supplier, CreateSupplierData, UpdateSupplierData };"],"version":3}